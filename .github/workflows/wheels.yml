name: Build and publish wheels

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build_wheels:
    name: Wheels on ${{ matrix.os }} with CIBW_ARCHS=${{ matrix.archs }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Numpy provides wheels for x86_64 and aarch64 only, we do the same
        include:
          - os: ubuntu-latest
            archs: x86_64 aarch64
          - os: macos-latest
            archs: universal2
          - os: windows-latest
            archs: auto
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        if: ${{ runner.os == 'Linux' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CIBW_ARCHS: ${{ matrix.archs }}
          # We use a single Python version to build ABI3 wheels, we don't use PyPy
          CIBW_BUILD: "cp39-*"
          # We skip MUSL (no numpy binary wheels)
          CIBW_SKIP: "*musl*"
          # Maturin images have Rust toolchain pre-installed
          CIBW_MANYLINUX_X86_64_IMAGE: "ghcr.io/pyo3/maturin"
          CIBW_MANYLINUX_AARCH64_IMAGE: "ghcr.io/pyo3/maturin"
      - uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl

  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build SDist
        run: pipx run build --sdist
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  publish:
    needs: [ build_wheels, make_sdist ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
